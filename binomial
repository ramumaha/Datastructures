#include<bits/stdc++.h>
using namespace std;

class Node
{public:
int data;
int degree;
Node*child,*sibling,*parent;
Node()
{}
};


Node* Newnode(int key)
{
    Node*temp=new Node;
    temp->data=key;
    temp->degree=0;
    temp->child=temp->parent=temp->sibling=NULL;
    return temp;
    }


list<Node*>union_binomial(list<Node*>_heap,list<Node*>temp)
{list<Node*>_new;
list<Node*>::iterator it=_heap.begin();
list<Node*>::iterator ot=temp.begin();
while(it!=_heap.end() && ot!=temp.end())
{
    if((*it)->degree <=(*ot)->degree)
    {
        _new.push_back(*it);
        it++;
    }
    else
    { _new.push_back(*ot);
        ot++;

    }
}

while(it!=_heap.end())
{
    _new.push_back(*it);
    it++;
}
while(ot!=temp.end())
{
    _new.push_back(*ot);
    ot++;
}
return _new;

}

Node*mergetree(Node*b1,Node*b2)
{
    if(b1->data>b2->data)
    {
        swap(b1,b2);
    }
    b2->parent=b1;
    b2->sibling=b1->child;
    b1->child=b2;
    b1->degree++;
    return b1;
}

list<Node*>adjust(list<Node*>_heap)
{if(_heap.size()<=1)
    return _heap;
  list<Node*>new_heap;
  list<Node*>::iterator it1,it2,it3;
  it1=it2=it3=_heap.begin();
  if(_heap.size()==2)
  {
      
      it2++;
      it3=_heap.end();
  }
  else
  {
      it2++;
      it3=it2;
      it3++;
  }
  while(it1!=_heap.end())
  {
      if(it2==_heap.end())
      {
          it1++;
      }
      else if((*it1)->degree < (*it2)->degree)
      {
          it1++;
          it2++;
          if(it3!=_heap.end())
          {
              it3++;
          }
      }
      else if(it3!=_heap.end() && (*it1)->degree == (*it2)->degree &&(*it3)->degree < (*it2)->degree)
      {
          it1++;
          it2++;
          it3++;
      }
      else if((*it1)->degree == (*it2)->degree)
      { *it1=mergetree(*it1,*it2);
         it2=_heap.erase(it2);
         if(it3!=_heap.end())
         {
             it3++;
         }


      }
  }
  return _heap;


}


list<Node*>inserttree_heap(list<Node*>_heap,Node*tree)
{
    list<Node*>temp;
    temp.push_back(tree);
    temp=union_binomial(_heap,temp);
    return adjust(temp);
}

list<Node*>insert(list<Node*>_heap,int key)
{
    Node*temp=Newnode(key);
    return inserttree_heap(_heap,temp);
}

void printtree(Node*t)
{
    while(t)
    {
        cout<<t->data<<" ";
        printtree(t->child);
        t=t->sibling;
    }
}

void printheap(list<Node*>_heap)
{
    list<Node*>::iterator it;
    it=_heap.begin();
    while(it!=_heap.end())
    {
        printtree(*it);
        it++;
    }
}

Node*get_min(list<Node*>_heap)
{
    list<Node*>::iterator it=_heap.begin();
    Node*temp=*it;
    while(it!=_heap.end())
    {
        if((*it)->data<temp->data)
        {
            temp=*it;
        }
        it++;
    }
    return temp;
}

list<Node*>removemin(Node*tree)
{
    list<Node*>heap;
    Node*temp=tree->child;
    Node*lo;
    while(temp)
    {
        lo=temp;
        temp=temp->sibling;
        lo->sibling=NULL;
        heap.push_front(lo);
    }
    return heap;
}




list<Node*>extractMin(list<Node*>_heap)
{list<Node*>new_heap,rest;
Node*temp;
temp=get_min(_heap);
list<Node*>::iterator it;
it=_heap.begin();
while(it!=_heap.end())
{   if(*it!=temp)
    {
        new_heap.push_back(*it);
    }
    it++;
}
rest=removemin(temp);
new_heap=union_binomial(new_heap,rest);
new_heap=adjust(new_heap);
return new_heap;

    
}

int main()
{
    list<Node*>_heap;
    _heap = insert(_heap,10);
    _heap = insert(_heap,20);
    _heap = insert(_heap,30);
    printheap(_heap);
    Node *temp = get_min(_heap);
    cout << "\nMinimum element of heap "
         << temp->data << "\n";
  
    // Delete minimum element of heap
    _heap = extractMin(_heap);
    cout << "Heap after deletion of minimum element\n";
    printheap(_heap);
}
