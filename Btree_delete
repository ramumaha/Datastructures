#include<bits/stdc++.h>
using namespace std;
using namespace std::chrono; 
class Btreenode
{
    int * keys;
    Btreenode**c;
    int t;
    int n;
    bool leaf;
    public:
    Btreenode(int _t,bool leaf);
    void insert_non(int k);
    void splitchild(int i,Btreenode*y);
    void traverse();
    int findkey(int k);
    void removefromleaf(int index);
    void removefromnonleaf(int index);
    int getpred(int index);
    int getsucc(int index);
    void borrowfromprev(int index);
    void borrowfromnext(int index);
    void remove(int k);
    void merge(int index);
    void fill(int index);
    friend class Btree;
};

class Btree
{
    Btreenode*root;
    int t;
    public:
    Btree(int _t)
    {
        t=_t;
    }
    void traverse()
    {
        if(root!=NULL)
        {
            root->traverse();
        }
    }
    void insert(int k);
    void remove(int k);
};

Btreenode ::Btreenode(int _t,bool leaf_)
{t=_t;
leaf=leaf_;
keys=new int[2*t-1];
c=new Btreenode*[2*t];
n=0;}

void Btree::insert(int k)
{
    if(root==NULL)
    {
        root=new Btreenode(t,true);
        root->keys[0]=k;
        root->n=1;

    }
    else
    {
        if(root->n==2*t-1)
        {
            Btreenode*s=new Btreenode(t,false);//coz it ll be future root
            s->c[0]=root;//root now child of s
            s->splitchild(0,root);//split root into 2 and mid element of root is placed as 1st ele of s
            int i=0;
            if(s->keys[0]<k)
            {
                i++;
            }
            s->c[i]->insert_non(k);//actual insertion of new element
            root=s;//changing root
        }
        else
        root->insert_non(k);//normal insertion
    }

}

void Btreenode::splitchild(int i,Btreenode*y)
{
    Btreenode*z=new Btreenode(y->t,y->leaf);//ll have the last set of element(t-1) and child pointers(t)
    z->n=t-1;
    for(int j=0;j<t-1;j++)
    {
        z->keys[j]=y->keys[j+t];
    }
    if(y->leaf==false)
    {
        for(int j=0;j<t;j++)
        {
            z->c[j]=y->c[j+t];
        }
    }
    y->n=t-1;
    for(int j=n;j>=i+1;j--)//till i times shifting has to be done
    {
        this->c[j+1]=this->c[j];
    }
    //move the root keys and child pointer for the actual insertion
     this->c[i+1]=z;
    for(int j=n-1;j>=i;j--)
    {
        this->keys[j+1]=this->keys[j];
    }
    
    this->keys[i]=y->keys[t-1];
   
    n++;  
}

void Btreenode::insert_non(int k)
{
    int i;
    i=n-1;//go to the rightmost and check
    if(leaf==true)//simple we can check the fullness and add
    {
    while(i>=0 && keys[i]>k)
       { keys[i+1]=keys[i];
           i--;}
    keys[i+1]=k;
    n++;}
    else
    {
        while(i>=0 && keys[i]>k)
        {
            i--;
        }
        if(c[i+1]->n==2*t-1)//that child thingy is full
        {
            splitchild(i+1,c[i+1]);
            if(keys[i+1]<k)
            i++;       

    }
    c[i+1]->insert_non(k);
}}

void Btreenode::traverse()
{int i;
for(i=0;i<n;i++)
{
    if(leaf==false)
    {
        c[i]->traverse();}
        cout<<" "<<keys[i]<<" ";

}
if(leaf==false)//coz there r t-1 keys and t pointers
{
    c[i]->traverse();
}

}

void Btree::remove(int k)
{   //cout<<"removal\n";
    if(!root)
    {
        cout<<"Tree empty\n";
        return;
    }
    root->remove(k);
    if(root->n==0)
    {
        Btreenode*temp=root;
        if(root->leaf)
        {
            root=NULL;
        }
        else
        {root=root->c[0];}
        delete(temp);
        
    }
    return;
}

int Btreenode::findkey(int k)
{
    int index=0;
    while(index<n && keys[index]<k)
    {++index;}
    //cout<<"key fnd";
    return index;
}

void Btreenode::remove(int k)
{
    int idx = findkey(k);
	if (idx < n && keys[idx] == k)
	{
		if (leaf)
			removefromleaf(idx);
		else
			removefromnonleaf(idx);
	}
	else
	{
		if (leaf)
		{
			cout << "The key "<< k <<" is not there\n";
			return;
		}
		bool flag = ( (idx==n)? true : false );
		if (c[idx]->n < t)
			fill(idx);
		if (flag && idx > n)
			c[idx-1]->remove(k);
		else
			c[idx]->remove(k);
	}
	return;
}

void Btreenode::removefromleaf(int index)//simplest
{
    for (int i=index+1; i<n; ++i)
		keys[i-1] = keys[i];

	// Reduce the count of keys
	n--;

	return;
}

void Btreenode::removefromnonleaf(int index)//find predecessor or successor 
                                            //swap positions with them
{
    int k = keys[index];
	if (c[index]->n >= t)
	{
		int pred = getpred(index);
		keys[index] = pred;
		c[index]->remove(pred);
	}
	else if (c[index+1]->n >= t)
	{
		int succ = getsucc(index);
		keys[index] = succ;
		c[index+1]->remove(succ);
	}
	else
	{
		merge(index);
		c[index]->remove(k);
	}
	return;

}

int Btreenode::getpred(int index)
{
    Btreenode*curr=c[index];
   while (!curr->leaf)
		curr = curr->c[curr->n];

	// Return the last key of the leaf
	return curr->keys[curr->n-1];
}

int Btreenode::getsucc(int index)
{
   Btreenode *cur = c[index+1];
	while (!cur->leaf)
		cur = cur->c[0];

	// Return the first key of the leaf
	return cur->keys[0];
}

void Btreenode::fill(int index)//if a node has less than t-1 keys
{if (index!=0 && c[index-1]->n>=t)
		borrowfromprev(index);

	else if (index!=n && c[index+1]->n>=t)
		borrowfromnext(index);
	else
	{
		if (index != n)
			merge(index);
		else
			merge(index-1);
	}
	return;

}

void Btreenode::borrowfromprev(int index)
{
    Btreenode*child=c[index];//parent's index-1 key goes to 1st key of child
    Btreenode*sibling=c[index-1];//last key of urs goes to parent
    for (int i=child->n-1; i>=0; --i)
		child->keys[i+1] = child->keys[i];
	if (!child->leaf)
	{
		for(int i=child->n; i>=0; --i)
			child->c[i+1] = child->c[i];
	}
	child->keys[0] = keys[index-1];
	if(!child->leaf)
		child->c[0] = sibling->c[sibling->n];
	keys[index-1] = sibling->keys[sibling->n-1];

	child->n += 1;
	sibling->n -= 1;

    return;
}
void Btreenode::borrowfromnext(int index)
{
    Btreenode*child=c[index];
    Btreenode*sibling=c[index+1];
    child->keys[(child->n)] = keys[index];
	if (!(child->leaf))
		child->c[(child->n)+1] = sibling->c[0];
	keys[index] = sibling->keys[0];
	for (int i=1; i<sibling->n; ++i)
		sibling->keys[i-1] = sibling->keys[i];
	if (!sibling->leaf)
	{
		for(int i=1; i<=sibling->n; ++i)
			sibling->c[i-1] = sibling->c[i];
	}
	child->n += 1;
	sibling->n -= 1;

    return;

}


void Btreenode::merge(int index)
{
   Btreenode *child = c[index];
	 Btreenode *sibling = c[index+1];
	child->keys[t-1] = keys[index];
	for (int i=0; i<sibling->n; ++i)
		child->keys[i+t] = sibling->keys[i];
	if (!child->leaf)
	{
		for(int i=0; i<=sibling->n; ++i)
			child->c[i+t] = sibling->c[i];
	}
	for (int i=index+1; i<n; ++i)
		keys[i-1] = keys[i];
	for (int i=index+2; i<=n; ++i)
		c[i-1] = c[i];
	child->n += sibling->n+1;
	n--;
	delete(sibling);
	return;
    

    
}




int main()
{  
    //Btree t(3);
    auto start = high_resolution_clock::now(); 
    Btree t(5);
    t.insert(12);
    t.insert(10);
    t.insert(15);
    t.insert(4);
    t.insert(1);
    t.insert(17);
    t.insert(3);
    t.insert(13);
    t.insert(8);
    cout<<"The tree is with degree 5 : ";
    t.traverse();
    cout<<"\n";
    cout<<"The tree after deleting 12 : ";
    t.remove(12);
    t.traverse();
    cout<<"\n";
    t.remove(13);
    cout<<"The tree after deleting 13 : ";
    t.traverse();
    cout<<"\n";
    t.remove(15);
    cout<<"The tree after deleting 15 : ";
    t.traverse();
    cout<<"\n";
    auto stop = high_resolution_clock::now(); 
    //cout<<"\n";
	auto duration = duration_cast<microseconds>(stop - start); 
    cout<< duration.count()<<" is time taken in micro seconds";
 
}
