#include<bits/stdc++.h>
using namespace std;

class Btreenode
{
    int * keys;
    Btreenode**c;
    int t;
    int n;
    bool leaf;
    public:
    Btreenode(int _t,bool leaf);
    void insert_non(int k);
    void splitchild(int i,Btreenode*y);
    void traverse();
    Btreenode*search(int k);
    friend class Btree;
};

class Btree
{
    Btreenode*root;
    int t;
    public:
    Btree(int _t)
    {
        t=_t;
    }
    void traverse()
    {
        if(root!=NULL)
        {
            root->traverse();
        }
    }
    void insert(int k);
    Btreenode*search(int l)
    {
        return (root==NULL)?NULL:root->search(l);
    }
};

Btreenode ::Btreenode(int _t,bool leaf_)
{t=_t;
leaf=leaf_;
keys=new int[2*t-1];
c=new Btreenode*[2*t];
n=0;}

void Btree::insert(int k)
{
    if(root==NULL)
    {
        root=new Btreenode(t,true);
        root->keys[0]=k;
        root->n=1;

    }
    else
    {
        if(root->n==2*t-1)
        {
            Btreenode*s=new Btreenode(t,false);//coz it ll be future root
            s->c[0]=root;//root now child of s
            s->splitchild(0,root);//split root into 2 and mid element of root is placed as 1st ele of s
            int i=0;
            if(s->keys[0]<k)
            {
                i++;
            }
            s->c[i]->insert_non(k);//actual insertion of new element
            root=s;//changing root
        }
        else
        root->insert_non(k);//normal insertion
    }

}

void Btreenode::splitchild(int i,Btreenode*y)
{
    Btreenode*z=new Btreenode(y->t,y->leaf);//ll have the last set of element(t-1) and child pointers(t)
    z->n=t-1;
    for(int j=0;j<t-1;j++)
    {
        z->keys[j]=y->keys[j+t];
    }
    if(y->leaf==false)
    {
        for(int j=0;j<t;j++)
        {
            z->c[j]=y->c[j+t];
        }
    }
    y->n=t-1;
    for(int j=n;j>=i+1;j--)//till i times shifting has to be done
    {
        this->c[j+1]=this->c[j];
    }
    //move the root keys and child pointer for the actual insertion
     this->c[i+1]=z;
    for(int j=n-1;j>=i;j--)
    {
        this->keys[j+1]=this->keys[j];
    }
    
    this->keys[i]=y->keys[t-1];
   
    n++;  
}

void Btreenode::insert_non(int k)
{
    int i;
    i=n-1;//go to the rightmost and check
    if(leaf==true)//simple we can check the fullness and add
    {
    while(i>=0 && keys[i]>k)
       { keys[i+1]=keys[i];
           i--;}
    keys[i+1]=k;
    n++;}
    else
    {
        while(i>=0 && keys[i]>k)
        {
            i--;
        }
        if(c[i+1]->n==2*t-1)//that child thingy is full
        {
            splitchild(i+1,c[i+1]);
            if(keys[i+1]<k)
            i++;       

    }
    c[i+1]->insert_non(k);
}}

void Btreenode::traverse()
{int i;
for(i=0;i<n;i++)
{
    if(leaf==false)
    {
        c[i]->traverse();}
        cout<<" "<<keys[i]<<" ";

}
if(leaf==false)//coz there r t-1 keys and t pointers
{
    c[i]->traverse();
}

}

Btreenode* Btreenode::search(int l)
{
    int i=0;
    while(i<n && keys[i]<l)
    {
        i++;
    }
    if(keys[i]==l)
    return this;
    if(leaf==true)
    return NULL;
    return c[i]->search(l);

}


int main()
{  
    Btree t(3);
    for(int i=100;i<110;i++)
    {
        t.insert(i);
    }
    t.traverse();
    int l;
    cout<<"\nenter the element to be searched :";
    cin>>l;
    t.search(l)!=NULL?cout<<"Key present": cout<<"key not available";
 
}
